{"version":3,"sources":["features/mail/content/Empty.tsx","lib/random.ts","features/mail/types.ts","features/mail/mailSlice.ts","features/mail/utils.ts","features/mail/list/Empty.tsx","features/mail/list/List.tsx","features/mail/mailboxes/Empty.tsx","features/mail/mailboxes/List.tsx","features/mail/Layout.tsx","features/login/Layout.tsx","components/ConditionalDisplay.tsx","lib/jmap.ts","features/login/loginSlice.ts","features/login/utils.ts","App.tsx","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["Empty","className","randomString","length","chars","charsLength","str","i","charAt","Math","floor","random","newMailbox","name","role","id","unreadEmails","newMail","mailboxId","subject","preview","seen","from","email","hasAttachment","mailboxIds","keywords","$seen","initialState","mailboxes","list","mailSlice","createSlice","reducers","setMailboxes","state","action","payload","actions","selectMailboxes","mail","selectMails","FEATURE_URL","getRouteParams","matchMailbox","useRouteMatch","matchMail","params","mailId","getMailboxName","mailbox","getMailboxIcon","getFromMail","List","routeParams","useSelector","mailListAll","inboxMailbox","filter","currentMailboxes","currentMailbox","mailList","Object","prototype","hasOwnProperty","call","backgroundClass","to","map","isUnreadMail","Layout","LoginStep","mailboxesClass","listClass","contentClass","ConditionalDisplay","props","cond","children","discoverJmapEndpoint","domain","a","wellKnownURL","fetch","response","url","fetchMailboxes","endpoint","accountId","headers","Headers","method","body","JSON","stringify","using","methodCalls","ids","json","methodResponses","success","message","Array","isArray","mbx","tryCredentials","getBasicToken","username","password","Base64","encode","loginSlice","authenticated","authorizationHeader","login","logout","isAuthenticated","dispatch","useDispatch","useState","Identifier","step","setStep","error","setError","more","setMore","loading","setLoading","identifier","setIdentifier","setPassword","setEndpoint","hasCustomEndpoint","setHasCustomEndpoint","discoverEndpoint","includes","Endpoint","trim","split","pop","discoveredEndpoint","Credentials","actionButton","authHeader","Authorization","batch","htmlFor","autoFocus","type","placeholder","value","onChange","e","target","onClick","disabled","checked","App","path","MailUrl","render","LoginUrl","exact","counterSlice","increment","decrement","incrementByAmount","store","configureStore","reducer","counter","counterReducer","mailReducer","loginReducer","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.ac5e9f59.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Empty(): JSX.Element {\n  return (\n    <div className=\"mail-layout-center\">\n      <div className=\"has-text-weight-bold\">Nothing selected</div>\n    </div>\n  );\n}\n\nexport default Empty;\n","export const randomString = (length = 8): string => {\n  const chars =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  const charsLength = chars.length;\n\n  let str = '';\n\n  for (let i = 0; i < length; i++) {\n    str += chars.charAt(Math.floor(Math.random() * charsLength));\n  }\n\n  return str;\n};\n","import { randomString } from '../../lib/random';\n\nexport type Mailbox = {\n  name: string;\n  role: string;\n  id: string;\n  unreadEmails: number;\n};\n\nexport type MailFrom = {\n  name?: string | null;\n  email?: string | null;\n};\n\nexport type Mail = {\n  from: MailFrom;\n  hasAttachment: boolean;\n  id: string;\n  mailboxIds: Record<string, boolean>;\n  preview: string;\n  subject: string;\n  keywords: Record<string, boolean>;\n};\n\nexport const newMailbox = (\n  name?: string,\n  role?: string,\n  id?: string,\n  unreadEmails?: number,\n): Mailbox => {\n  return {\n    name: name || '(unknown)',\n    role: role || '',\n    id: id || randomString(36),\n    unreadEmails: unreadEmails || 0,\n  };\n};\n\nexport const newMail = (\n  mailboxId: string,\n  subject?: string,\n  preview?: string,\n  seen = true,\n): Mail => {\n  return {\n    from: {\n      name: '' || randomString(8),\n      email: '' || `${randomString(4)}@${randomString(4)}.${randomString(2)}`,\n    },\n    hasAttachment: false,\n    id: randomString(36),\n    mailboxIds: {\n      [mailboxId]: true,\n    },\n    preview: preview || 'Lorem ipsum…',\n    subject: subject || '(no subject)',\n    keywords: {\n      $seen: seen,\n    },\n  };\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport { Mailbox, Mail, newMailbox, newMail } from './types';\n\ninterface MailState {\n  mailboxes: Mailbox[];\n  list: Mail[];\n}\n\nconst initialState: MailState = {\n  mailboxes: [\n    newMailbox('INBOX', 'inbox', '00000000-0000-0000-0000-000000000001', 1),\n  ],\n  list: [\n    newMail('00000000-0000-0000-0000-000000000001'),\n    newMail(\n      '00000000-0000-0000-0000-000000000001',\n      'Hello world!',\n      'How are you?',\n      false,\n    ),\n    newMail('00000000-0000-0000-0000-000000000001'),\n    newMail('00000000-0000-0000-0000-000000000001'),\n    newMail('00000000-0000-0000-0000-000000000001'),\n    newMail('00000000-0000-0000-0000-000000000002'),\n    newMail('00000000-0000-0000-0000-000000000002'),\n    newMail('00000000-0000-0000-0000-000000000003'),\n    newMail('00000000-0000-0000-0000-000000000003'),\n    newMail('00000000-0000-0000-0000-000000000003'),\n    newMail('00000000-0000-0000-0000-000000000003'),\n    newMail('00000000-0000-0000-0000-000000000003'),\n    newMail('00000000-0000-0000-0000-000000000004'),\n    newMail('00000000-0000-0000-0000-000000000005'),\n    newMail('00000000-0000-0000-0000-000000000005'),\n    newMail('00000000-0000-0000-0000-000000000005'),\n    newMail('00000000-0000-0000-0000-000000000005'),\n    newMail('00000000-0000-0000-0000-000000000005'),\n    newMail('00000000-0000-0000-0000-000000000005'),\n    newMail('00000000-0000-0000-0000-000000000005'),\n    newMail('00000000-0000-0000-0000-000000000005'),\n    newMail('00000000-0000-0000-0000-000000000005'),\n    newMail('00000000-0000-0000-0000-000000000005'),\n    newMail('00000000-0000-0000-0000-000000000005'),\n    newMail('00000000-0000-0000-0000-000000000005'),\n    newMail('00000000-0000-0000-0000-000000000005'),\n    newMail('00000000-0000-0000-0000-000000000005'),\n    newMail('00000000-0000-0000-0000-000000000005'),\n    newMail('00000000-0000-0000-0000-000000000005'),\n    newMail('00000000-0000-0000-0000-000000000005'),\n    newMail('00000000-0000-0000-0000-000000000005'),\n    newMail('00000000-0000-0000-0000-000000000005'),\n    newMail('00000000-0000-0000-0000-000000000005'),\n    newMail('00000000-0000-0000-0000-000000000005'),\n    newMail('00000000-0000-0000-0000-000000000005'),\n    newMail('00000000-0000-0000-0000-000000000005'),\n  ],\n};\n\nexport const mailSlice = createSlice({\n  name: 'mail',\n  initialState,\n  reducers: {\n    setMailboxes: (state, action: PayloadAction<Mailbox[]>) => {\n      state.mailboxes = action.payload;\n    },\n  },\n});\n\nexport const { setMailboxes } = mailSlice.actions;\n\nexport const selectMailboxes = (state: RootState): Mailbox[] =>\n  state.mail.mailboxes;\n\nexport const selectMails = (state: RootState): Mail[] => state.mail.list;\n\nexport default mailSlice.reducer;\n","import { useRouteMatch } from 'react-router-dom';\nimport { Mail, Mailbox } from './types';\n\ntype RouteMatch = {\n  mailboxId: string;\n  mailId: string;\n};\n\nexport const FEATURE_URL = '/mail/';\n\nexport const getRouteParams = (): RouteMatch => {\n  const matchMailbox = useRouteMatch<RouteMatch>(`${FEATURE_URL}:mailboxId`);\n  const matchMail = useRouteMatch<RouteMatch>(\n    `${FEATURE_URL}:mailboxId/:mailId`,\n  );\n\n  const mailboxId = matchMailbox?.params.mailboxId || '';\n  const mailId = (mailboxId && matchMail?.params.mailId) || '';\n\n  return {\n    mailboxId,\n    mailId,\n  };\n};\n\nexport const getMailboxName = (mailbox: Mailbox): string => {\n  switch (mailbox.role) {\n    case 'inbox':\n      return 'Inbox';\n    case 'drafts':\n      return 'Drafts';\n    case 'sent':\n      return 'Sent Messages';\n    case 'junk':\n      return 'Junk';\n    case 'trash':\n      return 'Deleted Messages';\n    case 'archive':\n      return 'Archive';\n  }\n\n  return mailbox.name;\n};\n\nexport const getMailboxIcon = (mailbox: Mailbox): string => {\n  switch (mailbox.role) {\n    case 'inbox':\n      return 'fas fa-inbox';\n    case 'drafts':\n      return 'fas fa-pencil-alt';\n    case 'sent':\n      return 'fas fa-paper-plane';\n    case 'junk':\n      return 'far fa-times-circle';\n    case 'trash':\n      return 'fas fa-trash-alt';\n    case 'archive':\n      return 'fas fa-archive';\n  }\n\n  if (mailbox.name === 'Notes') {\n    return 'far fa-sticky-note';\n  }\n\n  return 'far fa-folder';\n};\n\nexport const isUnreadMail = (mail: Mail): boolean => {\n  if (mail?.keywords?.$seen === false) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const getFromMail = (mail: Mail): string => {\n  if (mail?.from) {\n    if (mail.from?.name) {\n      return mail.from.name;\n    } else if (mail.from?.email) {\n      return mail.from.email;\n    }\n  }\n\n  return '(unknown)';\n};\n","import React from 'react';\n\nfunction Empty(): JSX.Element {\n  return (\n    <div className=\"mail-layout-center\">\n      <div className=\"has-text-weight-bold\">\n        Mailbox is empty\n        <nav className=\"navbar has-no-background\"></nav>\n      </div>\n    </div>\n  );\n}\n\nexport default Empty;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { selectMailboxes, selectMails } from '../mailSlice';\nimport { newMailbox } from '../types';\nimport {\n  FEATURE_URL,\n  getFromMail,\n  getMailboxName,\n  getRouteParams,\n  isUnreadMail,\n} from '../utils';\nimport Empty from './Empty';\n\nfunction List(): JSX.Element {\n  const routeParams = getRouteParams();\n  let mailboxId = routeParams.mailboxId;\n\n  const mailboxes = useSelector(selectMailboxes);\n  const mailListAll = useSelector(selectMails);\n\n  if (!mailboxId) {\n    const inboxMailbox = mailboxes.filter(\n      (mailbox) => mailbox.role === 'inbox',\n    );\n    if (inboxMailbox.length > 0) {\n      mailboxId = inboxMailbox[0].id;\n    }\n  }\n\n  const currentMailboxes = mailboxes.filter(\n    (mailbox) => mailbox.id === mailboxId,\n  );\n\n  const currentMailbox =\n    currentMailboxes.length > 0 ? currentMailboxes[0] : newMailbox();\n\n  const mailList = mailListAll.filter((mail) => {\n    if (\n      mail.mailboxIds &&\n      Object.prototype.hasOwnProperty.call(mail.mailboxIds, currentMailbox.id)\n    ) {\n      return mail.mailboxIds[currentMailbox.id];\n    }\n\n    return false;\n  });\n\n  const mailId = routeParams.mailId || '';\n  const backgroundClass = mailList.length > 0 ? 'has-background-white' : '';\n\n  return (\n    <div className=\"is-flex is-flex-grow-1 is-flex-direction-column is-clipped\">\n      <div className=\"mail-layout-title\">\n        <Link\n          to={FEATURE_URL}\n          className=\"button is-small is-white mr-3 only-mobile\"\n        >\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-chevron-left\"></i>\n          </span>\n        </Link>\n        {getMailboxName(currentMailbox)}\n      </div>\n      <div\n        className={`is-flex is-flex-grow-1 is-flex-direction-column overflowable ${backgroundClass}`}\n      >\n        {mailList.length === 0 ? (\n          <Empty />\n        ) : (\n          mailList.map((mail) => {\n            const className =\n              isUnreadMail(mail) || mail.id === mailId\n                ? 'app-item-selected'\n                : 'app-item';\n            return (\n              <Link to={`${FEATURE_URL}${mailboxId}/${mail.id}`} key={mail.id}>\n                <div className={className}>\n                  <p>{getFromMail(mail)}</p>\n                  <p>{mail.subject}</p>\n                  <p>{mail.preview}</p>\n                </div>\n              </Link>\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default List;\n","import React from 'react';\n\nfunction Empty(): JSX.Element {\n  return (\n    <div className=\"mail-layout-center\">\n      <div className=\"has-text-weight-bold\">You do not have any mailboxes</div>\n    </div>\n  );\n}\n\nexport default Empty;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { selectMailboxes } from '../mailSlice';\nimport { getMailboxIcon, getMailboxName, getRouteParams } from '../utils';\nimport Empty from './Empty';\n\nfunction List(): JSX.Element {\n  const mailboxes = useSelector(selectMailboxes);\n\n  const routeParams = getRouteParams();\n  let mailboxId = routeParams.mailboxId || 'inbox';\n  if (mailboxId === 'inbox') {\n    mailboxId = mailboxes.length > 0 ? mailboxes[0].id : '';\n  }\n\n  return mailboxes.length === 0 ? (\n    <Empty />\n  ) : (\n    <div className=\"is-flex-grow-1 overflowable\">\n      {mailboxes.map((mailbox) => {\n        const className =\n          mailbox.id === mailboxId ? 'app-item-selected' : 'app-item';\n        return (\n          <Link to={`/mail/${mailbox.id}`} key={mailbox.id}>\n            <div className={`icon-text ${className}`}>\n              <span className=\"icon mr-3\">\n                <i className={getMailboxIcon(mailbox)}></i>\n              </span>\n              <span>{getMailboxName(mailbox)}</span>\n              {mailbox.unreadEmails > 0 && (\n                <span className=\"tag is-normal is-rounded is-primary has-text-weight-bold ml-3\">\n                  {mailbox.unreadEmails}\n                </span>\n              )}\n            </div>\n          </Link>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default List;\n","import React from 'react';\nimport './Layout.css';\nimport MailContent from './content/Empty';\nimport MailList from './list/List';\nimport Mailboxes from './mailboxes/List';\nimport { getRouteParams } from './utils';\n\nfunction Layout(): JSX.Element {\n  const routeParams = getRouteParams();\n\n  let mailboxesClass = '';\n  let listClass = 'hide-mobile';\n  let contentClass = 'hide-mobile';\n\n  if (routeParams.mailboxId) {\n    if (routeParams.mailId) {\n      mailboxesClass = 'hide-mobile';\n      listClass = 'hide-mobile';\n      contentClass = '';\n    } else {\n      mailboxesClass = 'hide-mobile';\n      listClass = '';\n      contentClass = 'hide-mobile';\n    }\n  }\n\n  return (\n    <div className=\"mail-layout\">\n      <div className={`mail-layout-mailboxes ${mailboxesClass}`}>\n        <Mailboxes />\n      </div>\n      <div className={`mail-layout-focused mail-layout-list ${listClass}`}>\n        <MailList />\n      </div>\n      <div className={`mail-layout-content ${contentClass}`}>\n        <MailContent />\n      </div>\n    </div>\n  );\n}\n\nexport default Layout;\n","import React, { useState } from 'react';\nimport { batch, useDispatch } from 'react-redux';\nimport ConditionalDisplay from '../../components/ConditionalDisplay';\nimport {\n  discoverJmapEndpoint,\n  fetchMailboxes,\n  getBasicToken,\n  tryCredentials,\n} from '../../lib/jmap';\nimport { setMailboxes } from '../mail/mailSlice';\nimport { Mailbox } from '../mail/types';\nimport './Layout.css';\nimport { login } from './loginSlice';\n\nenum LoginStep {\n  Identifier = 0,\n  Endpoint,\n  Credentials,\n}\n\nfunction Layout(): JSX.Element {\n  const dispatch = useDispatch();\n\n  const [step, setStep] = useState<LoginStep>(LoginStep.Identifier);\n  const [error, setError] = useState<string>('');\n  const [more, setMore] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [identifier, setIdentifier] = useState<string>('');\n  const [password, setPassword] = useState<string>('');\n  const [endpoint, setEndpoint] = useState<string>('');\n  const [hasCustomEndpoint, setHasCustomEndpoint] = useState<boolean>(false);\n  const method = 'Basic';\n\n  const discoverEndpoint = async () => {\n    if (loading) return;\n    setLoading(true);\n\n    if (!identifier.includes('@')) {\n      setError(\n        'Your identifier is not an email. Please specify an endpoint manually.',\n      );\n      setStep(LoginStep.Endpoint);\n      setLoading(false);\n      return;\n    }\n\n    const domain = identifier.trim().split('@').pop();\n    if (!domain) {\n      setError(\n        'Unable to discover a domain name in your email identifier. Please specify an endpoint manually.',\n      );\n      setStep(LoginStep.Endpoint);\n      setLoading(false);\n      return;\n    }\n\n    const discoveredEndpoint = await discoverJmapEndpoint(domain);\n\n    setEndpoint(discoveredEndpoint);\n    setStep(LoginStep.Credentials);\n\n    setLoading(false);\n  };\n\n  const actionButton = async () => {\n    if (loading) return;\n    setLoading(true);\n\n    if (step === LoginStep.Identifier) {\n      setLoading(false);\n      await discoverEndpoint();\n      setLoading(true);\n    }\n\n    if (step === LoginStep.Endpoint) {\n      if (endpoint === '') {\n        setError('Endpoint is empty.');\n        setLoading(false);\n        return;\n      }\n      setHasCustomEndpoint(true);\n      setStep(LoginStep.Credentials);\n    }\n\n    if (step === LoginStep.Credentials) {\n      const authHeader = `Basic ${getBasicToken(identifier, password)}`;\n      try {\n        await tryCredentials(endpoint, {\n          Authorization: authHeader,\n        });\n      } catch (e) {\n        setError('Bad credentials. Please retry.');\n        setLoading(false);\n        return;\n      }\n      const mailboxes: Mailbox[] = (await fetchMailboxes(endpoint, identifier, {\n        Authorization: authHeader,\n      })) as unknown as Mailbox[];\n\n      batch(() => {\n        dispatch(login(authHeader));\n        dispatch(setMailboxes(mailboxes));\n      });\n\n      return;\n    }\n\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"login-layout\">\n      <div>\n        {error && (\n          <article className=\"message is-danger\">\n            <div className=\"message-body\">{error}</div>\n          </article>\n        )}\n\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"login-form-identifier\">\n            Identifier\n          </label>\n          <div className=\"control\">\n            <input\n              autoFocus\n              id=\"login-form-identifier\"\n              className=\"input\"\n              type=\"email\"\n              placeholder=\"john.doe@example.com\"\n              value={identifier}\n              onChange={(e) => setIdentifier(e.target.value)}\n            />\n          </div>\n        </div>\n\n        <ConditionalDisplay\n          cond={more || step === LoginStep.Endpoint || hasCustomEndpoint}\n        >\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"login-form-endpoint\">\n              Endpoint\n            </label>\n            <div className=\"control\">\n              <input\n                id=\"login-form-endpoint\"\n                className=\"input\"\n                type=\"url\"\n                placeholder=\"https://example.com\"\n                value={endpoint}\n                onChange={(e) => setEndpoint(e.target.value)}\n              />\n            </div>\n            <p className=\"help\">\n              <span\n                className=\"has-text-primary has-pointer\"\n                onClick={discoverEndpoint}\n              >\n                Discover endpoint\n              </span>\n            </p>\n          </div>\n        </ConditionalDisplay>\n\n        <ConditionalDisplay cond={more}>\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"login-form-method\">\n              Authentication method\n            </label>\n            <div className=\"control\">\n              <div className=\"select is-fullwidth\">\n                <select id=\"login-form-method\" disabled>\n                  <option value={method}>Password</option>\n                </select>\n              </div>\n            </div>\n            <p className=\"help\">\n              <span className=\"has-text-primary has-pointer\">\n                Discover the available authentication methods\n              </span>\n            </p>\n          </div>\n        </ConditionalDisplay>\n\n        <ConditionalDisplay cond={more || step >= LoginStep.Credentials}>\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"login-form-password\">\n              Password\n            </label>\n            <div className=\"control\">\n              <input\n                id=\"login-form-password\"\n                className=\"input\"\n                type=\"password\"\n                placeholder=\"********\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n              />\n            </div>\n          </div>\n        </ConditionalDisplay>\n\n        <div className=\"login-layout-bottom\">\n          <button\n            className=\"button is-primary\"\n            onClick={() => actionButton()}\n            disabled={identifier === '' && !more}\n          >\n            {((more || step === LoginStep.Credentials) && 'Sign In') ||\n              'Next »'}\n          </button>\n          <label className=\"checkbox\">\n            <input\n              type=\"checkbox\"\n              checked={more}\n              onChange={(e) => setMore(e.target.checked)}\n            />\n            <span>More options</span>\n          </label>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Layout;\n","import React from 'react';\n\nexport type ConditionalDisplayProps = {\n  cond: boolean;\n  children: React.ReactNode;\n};\n\nconst ConditionalDisplay: React.FC<ConditionalDisplayProps> = (props) => {\n  return <>{props.cond && props.children}</>;\n};\n\nexport default ConditionalDisplay;\n","import { Base64 } from 'js-base64';\n\nexport const discoverJmapEndpoint = async (domain: string): Promise<string> => {\n  const wellKnownURL = `https://${domain}/.well-known/jmap`;\n  const response = await fetch(wellKnownURL);\n  return response.url;\n};\n\nexport const fetchMailboxes = async (\n  endpoint: string,\n  accountId: string,\n  headers?: Record<string, string>,\n): Promise<Record<string, string | number | boolean>> => {\n  const response = await fetch(endpoint, {\n    headers: new Headers({ ...headers, 'Content-Type': 'application/json' }),\n    method: 'POST',\n    body: JSON.stringify({\n      using: ['urn:ietf:params:jmap:core', 'urn:ietf:params:jmap:mail'],\n      methodCalls: [\n        [\n          'Mailbox/get',\n          {\n            accountId: accountId,\n            ids: null,\n          },\n          '0',\n        ],\n      ],\n    }),\n  });\n  const json = await response.json();\n  if (!json.methodResponses) {\n    return {\n      success: false,\n      message: 'not a valid JMAP response',\n    };\n  }\n\n  const methodResponses = json.methodResponses;\n  if (\n    !methodResponses ||\n    !Array.isArray(methodResponses) ||\n    methodResponses.length !== 1\n  ) {\n    return {\n      success: false,\n      message: 'no valid response',\n    };\n  }\n\n  const mbx = methodResponses[0];\n\n  if (mbx[0] !== 'Mailbox/get') {\n    return {\n      success: false,\n      message: 'not the expected method',\n    };\n  }\n  if (!mbx[1] || !mbx[1].list || !Array.isArray(mbx[1].list)) {\n    return {\n      success: false,\n      message: 'could not fetch mailboxes',\n    };\n  }\n\n  const list = mbx[1].list;\n  return list;\n};\n\nexport const tryCredentials = async (\n  endpoint: string,\n  headers?: Record<string, string>,\n): Promise<undefined> => {\n  const response = await fetch(endpoint, {\n    headers: new Headers({ ...headers, 'Content-Type': 'application/json' }),\n    method: 'GET',\n  });\n  const json = await response.json();\n  return json;\n};\n\nexport const getBasicToken = (username: string, password: string): string => {\n  return Base64.encode(`${username}:${password}`);\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\n\ninterface LoginState {\n  authenticated: boolean;\n  authorizationHeader: string;\n}\n\nconst initialState: LoginState = {\n  authenticated: false,\n  authorizationHeader: '',\n};\n\nexport const loginSlice = createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    login: (state, action: PayloadAction<string>) => {\n      state.authorizationHeader = action.payload;\n      state.authenticated = true;\n    },\n    logout: (state) => {\n      state.authorizationHeader = '';\n      state.authenticated = false;\n    },\n  },\n});\n\nexport const { login, logout } = loginSlice.actions;\n\nexport const isAuthenticated = (state: RootState): boolean =>\n  state.login.authenticated;\nexport const selectAuthorizationHeader = (state: RootState): string =>\n  state.login.authorizationHeader;\n\nexport default loginSlice.reducer;\n","export const FEATURE_URL = '/login/';\n","import React from 'react';\nimport { Switch } from 'react-router';\nimport { Redirect, Route } from 'react-router-dom';\nimport '@fortawesome/fontawesome-free/js/all';\nimport MailLayout from './features/mail/Layout';\nimport LoginLayout from './features/login/Layout';\nimport { FEATURE_URL as MailUrl } from './features/mail/utils';\nimport { FEATURE_URL as LoginUrl } from './features/login/utils';\nimport './App.css';\nimport { useSelector } from 'react-redux';\nimport { isAuthenticated } from './features/login/loginSlice';\n\nfunction App(): JSX.Element {\n  const authenticated = useSelector(isAuthenticated);\n\n  return (\n    <div className=\"app\">\n      <nav className=\"navbar is-primary\">\n        <div className=\"navbar-brand\">\n          <div className=\"navbar-item\">JMAP Webmail</div>\n        </div>\n      </nav>\n      <div className=\"app-container\">\n        <Switch>\n          <Route\n            path={MailUrl}\n            render={() => {\n              return authenticated ? (\n                <MailLayout />\n              ) : (\n                <Redirect to={LoginUrl} />\n              );\n            }}\n          />\n          <Route\n            path={LoginUrl}\n            render={() => {\n              return !authenticated ? (\n                <LoginLayout />\n              ) : (\n                <Redirect to={MailUrl} />\n              );\n            }}\n          />\n          <Route\n            path=\"/\"\n            exact={false}\n            render={() => {\n              return authenticated ? (\n                <Redirect to={MailUrl} />\n              ) : (\n                <Redirect to={LoginUrl} />\n              );\n            }}\n          />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk, RootState } from '../../app/store';\n\ninterface CounterState {\n  value: number;\n}\n\nconst initialState: CounterState = {\n  value: 0,\n};\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\nexport const incrementAsync =\n  (amount: number): AppThunk =>\n  (dispatch) => {\n    setTimeout(() => {\n      dispatch(incrementByAmount(amount));\n    }, 1000);\n  };\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState): number => state.counter.value;\n\nexport default counterSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport mailReducer from '../features/mail/mailSlice';\nimport loginReducer from '../features/login/loginSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    mail: mailReducer,\n    login: loginReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.min.css';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}